from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from DB import privyazka_DB, soderzimoe_DB, vidpravka_DB, \
    transport_DB, transport_perep_DB, transport_peremish_st, \
    transport_peremish_in, transport_vidpravka_bl, soderzimoe_full_DB
import json
bot = Bot(token="5662776987:AAFNQiftIFBgayordIizZxMeRDcZWCmq7Ao")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
btn_berta = KeyboardButton("‚ôà –ë–µ—Ä—Ç–∞")
btn_blyzenko = KeyboardButton('‚ôø –ë–ª–∏–∑–µ–Ω—å–∫–æ')
btn_other = KeyboardButton("üî∑ TEST")



btn_info = KeyboardButton('‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
btn_main = KeyboardButton('üü° –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
btn_back = KeyboardButton('üü° –ù–∞–∑–∞–¥')

btn_berta_popovn = KeyboardButton('‚òÆ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è')
btn_berta_vidpravka = KeyboardButton('‚òØ –í—ñ–¥–ø—Ä–∞–≤–∫–∞')
# btn_berta_perep = KeyboardButton('‚ú° –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞')
btn_berta_privyazka = KeyboardButton("–ü—Ä–∏–≤'—è–∑–∫–∞")
btn_berta_vmist = KeyboardButton("–í–º—ñ—Å—Ç —Å–∫–ª–∞–¥—É")





btn_blyzenko_peremisch = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è')
# btn_blyzenko_popovn = KeyboardButton('‚ÑπÔ∏è –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è')
# btn_blyzenko_perep = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞')
# btn_blyzenko_peremisch_st = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è ST*')
btn_blyzenko_vidpravka = KeyboardButton('‚ÑπÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞')

btn_soder_nisiy = KeyboardButton('–ù–æ—Å—ñ–π')
btn_artikul = KeyboardButton('–ù–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞')
btn_nazva_artikulf = KeyboardButton('–ù–∞–∑–≤–∞ –∞—Ä—Ç–∏–∫—É–ª–∞')
btn_soder_test = KeyboardButton('–¢–µ—Å—Ç')




main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_berta, btn_blyzenko, btn_other)
other_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_info, btn_main)
berta_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_berta_popovn, btn_berta_vidpravka, btn_back, btn_berta_privyazka, btn_berta_vmist)
blyzenko_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_blyzenko_peremisch, btn_blyzenko_vidpravka, btn_back)
vmist_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_soder_nisiy, btn_artikul, btn_nazva_artikulf, btn_soder_test, btn_back)
# vmist_menu.add(btn_back)

def load_whitelist(filename):
    with open(filename, 'r') as file:
        data = json.load(file)
        return data.get("admin_user_ids", [])




@dp.message_handler(commands=['start'])
async def whitelist(message: types.Message):
    whitelistt = load_whitelist('whitelist.json')
    if message.from_user.id not in whitelistt:
        await message.answer("–í–∏ –Ω–µ –≤ WHITELIST")
    else:
        await bot.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!",
                               reply_markup=main_menu)


# –ö–Ω–æ–ø–∫–∏ –ú–ï–ù–Æ
@dp.message_handler(lambda message: message.text == "‚ôà –ë–µ—Ä—Ç–∞")
async def berta_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –ë–µ—Ä—Ç–∞...', reply_markup=berta_menu)

@dp.message_handler(lambda message: message.text == "‚ôø –ë–ª–∏–∑–µ–Ω—å–∫–æ")
async def berta_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –ë–ª–∏–∑–µ–Ω—å–∫–æ...', reply_markup=blyzenko_menu)

@dp.message_handler(lambda message: message.text == "üü° –ù–∞–∑–∞–¥")
async def back_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é...', reply_markup=main_menu)

# –ë–ï–†–¢–ê
@dp.message_handler(lambda message: message.text == "‚òÆ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è")
async def back_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é... ‚è≥')

    transport_DB('RP')
    transport_perep_DB("CP")

    with open("cache/PNG/transport.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ‚§¥Ô∏è')

    with open("cache/PNG/transport_perep.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∏ ‚§¥Ô∏è')


@dp.message_handler(lambda message: message.text == "‚òØ –í—ñ–¥–ø—Ä–∞–≤–∫–∞")
async def popovnenya(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é... ‚è≥')
    vidpravka_DB()

    with open("cache/PNG/vidpravka_pack.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–Ø—â–∏—á–Ω–∞ –∑–æ–Ω–∞ ‚§¥Ô∏è')
    with open("cache/PNG/vidpravka_piec.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–®—Ç—É—á–Ω–∞ –∑–æ–Ω–∞ ‚§¥Ô∏è')

# –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è
@dp.message_handler(lambda message: message.text == "–ü—Ä–∏–≤'—è–∑–∫–∞")
async def privyazka(message: types.Message):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª:")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await bot.get_chat_member(message.chat.id, message.from_user.id)
    context = dp.current_state(user=message.from_user.id)
    await context.set_state('privyazka_state')


@dp.message_handler(state='privyazka_state')
async def privyazka_state(message: types.Message, state: State):
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º
    print(type(message.text))
    privyazka_DB(message.text)

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

    with open("cache/PNG/privyazka.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)

# –ó–∞–ª–∏—à–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥—ñ —Ñ—É–Ω–∫—Ü—ñ—è
@dp.message_handler(lambda message: message.text == "–ó–∞–ª–∏—à–æ–∫")
async def handle_topup(message: types.Message):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä—É:")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await bot.get_chat_member(message.chat.id, message.from_user.id)
    context = dp.current_state(user=message.from_user.id)
    await context.set_state('waiting_for_text_sklad')


@dp.message_handler(state='waiting_for_text_sklad')
async def process_topup_text(message: types.Message, state: State):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    soderzimoe_DB(message.text)

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

    with open("cache/PNG/soderzimoe.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)

# –ë–õ–ò–ó–ï–ù–¨–ö–û

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è")
async def back_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é... ‚è≥')
    transport_peremish_st()
    transport_peremish_in()

    with open("cache/PNG/transport_perem_IN.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è IN-* ‚§¥Ô∏è')

    with open("cache/PNG/transport_perem_ST.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è ST-* ‚§¥Ô∏è')

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞")
async def back_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é... ‚è≥')
    transport_vidpravka_bl()

    with open("cache/PNG/transport_vidpravka_bl.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, '–í—ñ–¥–ø—Ä–∞–≤–∫–∞ ‚§¥Ô∏è')

@dp.message_handler(lambda message: message.text == "–í–º—ñ—Å—Ç —Å–∫–ª–∞–¥—É")
async def berta_menu_btn(message: types.Message):
    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –í–º—ñ—Å—Ç...', reply_markup=vmist_menu)

@dp.message_handler(lambda message: message.text == "–¢–µ—Å—Ç")
async def search_by_nosiy_test(message: types.Message):
    await message.reply("—à—É–∫–∞—î–º–æ –ø–æ –Ω–æ—Å—ñ—é —Ç–µ—Å—Ç:")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await bot.get_chat_member(message.chat.id, message.from_user.id)
    context = dp.current_state(user=message.from_user.id)
    await context.set_state('vmist_state_test')

@dp.message_handler(state='vmist_state_test')
async def state_search_by_nosiy_test(message: types.Message, state: State):

    df = soderzimoe_full_DB(message.text, "LOADUNIT_ID")

    vmist_menu_test = ReplyKeyboardMarkup(resize_keyboard=True)

    for PRODUCT_NAME in df["PRODUCT_NAME"]:
        vmist_menu_test.add(KeyboardButton(PRODUCT_NAME))

    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é TEST...', reply_markup=vmist_menu_test)
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await bot.get_chat_member(message.chat.id, message.from_user.id)
    context = dp.current_state(user=message.from_user.id)
    await context.set_state('vmist_state_test_no2')

@dp.message_handler(state='vmist_state_test_no2')
async def state_search_by_nosiy_test(message: types.Message, state: State):
    # await bot.send_message(message.from_user.id, 'ON STATE')
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    soderzimoe_full_DB(message.text, "PRODUCT_NAME")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

    with open("cache/PNG/soderzimoe_full.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)
    await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –í–º—ñ—Å—Ç...', reply_markup=vmist_menu)

@dp.message_handler(lambda message: message.text == "–ù–æ—Å—ñ–π")
async def handle_topup(message: types.Message):
    await message.reply("—à—É–∫–∞—î–º–æ –ø–æ –Ω–æ—Å—ñ—é:")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    await bot.get_chat_member(message.chat.id, message.from_user.id)
    context = dp.current_state(user=message.from_user.id)
    await context.set_state('vmist_state')

@dp.message_handler(state='vmist_state')
async def process_topup_text(message: types.Message, state: State):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    soderzimoe_full_DB(message.text, "LOADUNIT_ID")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    await state.finish()

    with open("cache/PNG/soderzimoe_full.png", 'rb') as photo:
        await bot.send_photo(message.chat.id, photo)




if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp)





