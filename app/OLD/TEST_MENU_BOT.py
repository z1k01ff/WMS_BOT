from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # pip install aiogram
from aiogram import Dispatcher, Bot, executor, types
import json
from selenium_to_txt import json_open
import asyncio
from DB import pandas
from DB import privyazka
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = "5662776987:AAFNQiftIFBgayordIizZxMeRDcZWCmq7Ao"

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∏–∫–∞...
bot = Bot(token=API_TOKEN)
dispatcher = Dispatcher(bot, storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
btn_berta = KeyboardButton("‚ôà –ë–µ—Ä—Ç–∞")
btn_blyzenko = KeyboardButton('‚ôø –ë–ª–∏–∑–µ–Ω—å–∫–æ')
btn_other = KeyboardButton("üî∑ TEST")



btn_info = KeyboardButton('‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
btn_main = KeyboardButton('üü° –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
btn_back = KeyboardButton('üü° –ù–∞–∑–∞–¥')

btn_berta_popovn = KeyboardButton('‚òÆ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è')
btn_berta_vidpravka = KeyboardButton('‚òØ –í—ñ–¥–ø—Ä–∞–≤–∫–∞')
btn_berta_perep = KeyboardButton('‚ú° –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞')

btn_blyzenko_peremisch_in = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è IN*')
btn_blyzenko_popovn = KeyboardButton('‚ÑπÔ∏è –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è')
btn_blyzenko_perep = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞')
btn_blyzenko_peremisch_st = KeyboardButton('‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è ST*')
btn_blyzenko_vidpravka = KeyboardButton('‚ÑπÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞')




main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_berta, btn_blyzenko, btn_other)
other_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_info, btn_main)
berta_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_berta_perep, btn_berta_popovn, btn_berta_vidpravka, btn_back)
blyzenko_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_blyzenko_popovn, btn_blyzenko_perep, btn_blyzenko_peremisch_in, btn_blyzenko_peremisch_st, btn_blyzenko_vidpravka, btn_back)

class Answer(StatesGroup):
    user_send_text = State()
    admin_answer = State()

@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!", reply_markup=main_menu)
chat_id=420995060

# @dispatcher.message_handler()
# async def messages(message: types.Message):
#     if message.text == "‚ôà –ë–µ—Ä—Ç–∞":
#         await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –ë–µ—Ä—Ç–∞...', reply_markup=berta_menu)
    # elif message.text == '‚ôø –ë–ª–∏–∑–µ–Ω—å–∫–æ':
    #     await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é –ë–ª–∏–∑–µ–Ω—å–∫–æ...', reply_markup=blyzenko_menu)
    # elif message.text == '‚òÆ –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è':
    #     await message.answer(json_open("popovn_berta.json"))
    # elif message.text == '‚òØ –í—ñ–¥–ø—Ä–∞–≤–∫–∞':
    #     await message.answer(json_open("vidpravka_berta.json"))
    # elif message.text == '‚ú° –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞':
    #     await message.answer(json_open("perepakovka_berta.json"))
    # elif message.text == 'üü° –ù–∞–∑–∞–¥':
    #     await bot.send_message(message.from_user.id, 'üü° –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–µ–Ω—é...', reply_markup=main_menu)
    # elif message.text == '‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è IN*':
    #     await message.answer(json_open("peremischenya_na_in_blyzenko.json"))
    # elif message.text == '‚ÑπÔ∏è –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è ST*':
    #     await message.answer(json_open("peremischenya_na_st_blyzenko.json"))
    # elif message.text == '‚ÑπÔ∏è –ü–µ—Ä–µ–ø–∞–∫–æ–≤–∫–∞':
    #     await message.answer(json_open("perepakovka_blyzenko.json"))
    # elif message.text == '‚ÑπÔ∏è –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è':
    #     await message.answer(json_open("popovn_blyzenko.json"))
    # elif message.text == '‚ÑπÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∫–∞':
    #     await message.answer(json_open("vidpravka_blyzenko.json"))
    # # elif message.text == 'üî∑ TEST':
    # #     test_mes = pandas()
    # #     await message.answer(message.text)
    #
    # else:
    #     await bot.send_message(message.from_user.id, f'üòê –ë–æ—Ç–∏–∫ –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤... :(')
@dispatcher.message_handler(text='üî∑ TEST')
async def handler(message: types.Message):
    await message.answer('üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ <b>(—É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)</b>:')
    print(Answer.user_send_text.set())
    await Answer.user_send_text.set()


# @dispatcher.message_handler(content_types=['text'])
# async def cmd_keyboard(message: types.Message):
#     if message.text == 'üî∑ TEST':
#         await message.answer('üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ <b>(—É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)</b>:')
#         await Answer.user_send_text.set()

    # else:
    #     await bot.send_message(message.from_user.id, f'üòê –ë–æ—Ç–∏–∫ –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤... :(')

@dispatcher.message_handler(state=Answer.user_send_text)
async def state_sended(message: types.Message, state: FSMContext):
    # db.set_user_text(message.from_user.id, int(message.text))
    # await message.answer(message.text)
    text = "111"
    await bot.send_message(message.from_user.id, text)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    executor.start_polling(dispatcher)
